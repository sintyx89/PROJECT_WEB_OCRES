{"ast":null,"code":"/* eslint-disable import/no-unresolved */\nimport axios from 'axios';\nimport handleError from './ErrorHandler.js'; // eslint-disable-next-line consistent-return\n\nasync function getJSON(values, url, // eslint-disable-next-line no-unused-vars\ncallback) {\n  const options = {\n    baseURL: \"\".concat(values.protocol).concat(values.hostName, \"/\"),\n    timeout: values.timeout\n  };\n\n  try {\n    // Retrieve possible content from memory-cache\n    const cachedResult = values.cache.get(url);\n\n    if (cachedResult) {\n      if (callback) {\n        // Call callback without errors\n        callback(cachedResult);\n      }\n\n      return cachedResult;\n    }\n\n    const response = await axios.get(url, options); // if there is an error\n\n    if (response.status !== 200) {\n      handleError(response, callback);\n    } else {\n      // If everything was good\n      // cache the object in memory-cache\n      // only if cacheLimit > 0\n      const responseData = response.data;\n\n      if (values.cacheLimit > 0) {\n        values.cache.set(url, responseData, values.cacheLimit);\n      } // If a callback is present\n\n\n      if (callback) {\n        // Call it, without errors\n        callback(responseData);\n      } else {\n        return responseData;\n      }\n    }\n  } catch (error) {\n    handleError(error, callback);\n  }\n}\n\nexport default getJSON;","map":null,"metadata":{},"sourceType":"module"}